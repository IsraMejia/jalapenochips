;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 06/05/2024 12:32:43 p.m.
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$285B			GOTO	_main
$0004	$	_recibe_byte:
;ejercicio0.c,3 :: 		char recibe_byte(){
;ejercicio0.c,5 :: 		while(PIR1.RCIF == 0);
$0004	$	L_recibe_byte_0:
$0004	$3000			MOVLW	0
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$1A8C			BTFSC	PIR1, 5
$0008	$3001			MOVLW	1
$0009	$00F1			MOVWF	STACK_1
$000A	$0871			MOVF	STACK_1, 0
$000B	$3A00			XORLW	0
$000C	$1903			BTFSC	STATUS, Z
$000D	$2804			GOTO	L_recibe_byte_0
$000E	$	L_recibe_byte_1:
;ejercicio0.c,6 :: 		return RCREG;
$000E	$081A			MOVF	RCREG, 0
$000F	$00F0			MOVWF	STACK_0
;ejercicio0.c,7 :: 		}
$0010	$0008			RETURN
$0011	$	_Mul_16x16_S:
$0011	$1303			BCF	STATUS, RP1
$0012	$1283			BCF	STATUS, RP0
$0013	$01FB			CLRF	STACK_11
$0014	$01FA			CLRF	STACK_10
$0015	$01F9			CLRF	STACK_9
$0016	$3080			MOVLW	128
$0017	$00F8			MOVWF	STACK_8
$0018	$01FD			CLRF	STACK_13
$0019	$1FF1			BTFSS	STACK_1, 7
$001A	$2821			GOTO	$+7
$001B	$09F1			COMF	STACK_1, F
$001C	$09F0			COMF	STACK_0, F
$001D	$0AF0			INCF	STACK_0, F
$001E	$1903			BTFSC	STATUS, Z
$001F	$0AF1			INCF	STACK_1, F
$0020	$0AFD			INCF	STACK_13, F
$0021	$1FF5			BTFSS	STACK_5, 7
$0022	$2829			GOTO	$+7
$0023	$09F5			COMF	STACK_5, F
$0024	$09F4			COMF	STACK_4, F
$0025	$0AF4			INCF	STACK_4, F
$0026	$1903			BTFSC	STATUS, Z
$0027	$0AF5			INCF	STACK_5, F
$0028	$0AFD			INCF	STACK_13, F
$0029	$0CF1			RRF	STACK_1, F
$002A	$0CF0			RRF	STACK_0, F
$002B	$1C03			BTFSS	STATUS, C
$002C	$2836			GOTO	$+10
$002D	$0874			MOVF	STACK_4, W
$002E	$07F9			ADDWF	STACK_9, F
$002F	$0875			MOVF	STACK_5, W
$0030	$1803			BTFSC	STATUS, C
$0031	$0F75			INCFSZ	STACK_5, W
$0032	$07FA			ADDWF	STACK_10, F
$0033	$1803			BTFSC	STATUS, C
$0034	$0AFB			INCF	STACK_11, F
$0035	$1003			BCF	STATUS, C
$0036	$1FF0			BTFSS	STACK_0, 7
$0037	$283E			GOTO	$+7
$0038	$0874			MOVF	STACK_4, W
$0039	$07FA			ADDWF	STACK_10, F
$003A	$1803			BTFSC	STATUS, C
$003B	$0AFB			INCF	STACK_11, F
$003C	$0875			MOVF	STACK_5, W
$003D	$07FB			ADDWF	STACK_11, F
$003E	$0CFB			RRF	STACK_11, F
$003F	$0CFA			RRF	STACK_10, F
$0040	$0CF9			RRF	STACK_9, F
$0041	$0CF8			RRF	STACK_8, F
$0042	$1C03			BTFSS	STATUS, C
$0043	$2829			GOTO	$-26
$0044	$1C7D			BTFSS	STACK_13, 0
$0045	$2851			GOTO	$+12
$0046	$09FB			COMF	STACK_11, F
$0047	$09FA			COMF	STACK_10, F
$0048	$09F9			COMF	STACK_9, F
$0049	$09F8			COMF	STACK_8, F
$004A	$0AF8			INCF	STACK_8, F
$004B	$1903			BTFSC	STATUS, Z
$004C	$0AF9			INCF	STACK_9, F
$004D	$1903			BTFSC	STATUS, Z
$004E	$0AFA			INCF	STACK_10, F
$004F	$1903			BTFSC	STATUS, Z
$0050	$0AFB			INCF	STACK_11, F
$0051	$087B			MOVF	STACK_11, W
$0052	$00F3			MOVWF	STACK_3
$0053	$087A			MOVF	STACK_10, W
$0054	$00F2			MOVWF	STACK_2
$0055	$0879			MOVF	STACK_9, W
$0056	$00F1			MOVWF	STACK_1
$0057	$0878			MOVF	STACK_8, W
$0058	$00F0			MOVWF	STACK_0
$0059	$0000			NOP
$005A	$0008			RETURN
$005B	$	_main:
$005B	$30C0			MOVLW	192
$005C	$1303			BCF	STATUS, RP1
$005D	$1283			BCF	STATUS, RP0
$005E	$00A4			MOVWF	main_valores_L0+0
$005F	$3060			MOVLW	96
$0060	$00A5			MOVWF	main_valores_L0+1
$0061	$3030			MOVLW	48
$0062	$00A6			MOVWF	main_valores_L0+2
$0063	$3090			MOVLW	144
$0064	$00A7			MOVWF	main_valores_L0+3
;ejercicio0.c,9 :: 		void main(){
;ejercicio0.c,15 :: 		int vueltas = 0;
$0065	$01A2			CLRF	main_vueltas_L0
$0066	$01A3			CLRF	main_vueltas_L0+1
;ejercicio0.c,20 :: 		TRISB = 0;
$0067	$1683			BSF	STATUS, RP0
$0068	$0186			CLRF	TRISB, 1
;ejercicio0.c,23 :: 		SPBRG = 129;
$0069	$3081			MOVLW	129
$006A	$0099			MOVWF	SPBRG
;ejercicio0.c,24 :: 		TXSTA.BRGH = 1;
$006B	$1518			BSF	TXSTA, 2
;ejercicio0.c,27 :: 		TXSTA.SYNC = 0; //modo asincrono
$006C	$1218			BCF	TXSTA, 4
;ejercicio0.c,28 :: 		RCSTA.SPEN = 1;
$006D	$1283			BCF	STATUS, RP0
$006E	$1798			BSF	RCSTA, 7
;ejercicio0.c,31 :: 		TXSTA.TXEN = 1;
$006F	$1683			BSF	STATUS, RP0
$0070	$1698			BSF	TXSTA, 5
;ejercicio0.c,32 :: 		RCSTA.CREN = 1;
$0071	$1283			BCF	STATUS, RP0
$0072	$1618			BSF	RCSTA, 4
;ejercicio0.c,34 :: 		while (1){
$0073	$	L_main_2:
;ejercicio0.c,35 :: 		dato = recibe_byte();
$0073	$2004			CALL	_recibe_byte
$0074	$0870			MOVF	STACK_0, 0
$0075	$00A0			MOVWF	main_dato_L0
;ejercicio0.c,36 :: 		while(PIR1.RCIF == 0){
$0076	$	L_main_4:
$0076	$3000			MOVLW	0
$0077	$1A8C			BTFSC	PIR1, 5
$0078	$3001			MOVLW	1
$0079	$00F2			MOVWF	STACK_2
$007A	$0872			MOVF	STACK_2, 0
$007B	$3A00			XORLW	0
$007C	$1D03			BTFSS	STATUS, Z
$007D	$2971			GOTO	L_main_5
;ejercicio0.c,37 :: 		if (dato == '1'){
$007E	$0820			MOVF	main_dato_L0, 0
$007F	$3A31			XORLW	49
$0080	$1D03			BTFSS	STATUS, Z
$0081	$28A8			GOTO	L_main_6
;ejercicio0.c,38 :: 		for(i=0; i < 4; i ++){
$0082	$01A8			CLRF	main_i_L0
$0083	$01A9			CLRF	main_i_L0+1
$0084	$	L_main_7:
$0084	$3080			MOVLW	128
$0085	$0629			XORWF	main_i_L0+1, 0
$0086	$00F0			MOVWF	STACK_0
$0087	$3080			MOVLW	128
$0088	$0270			SUBWF	STACK_0, 0
$0089	$1D03			BTFSS	STATUS, Z
$008A	$288D			GOTO	L_main_29
$008B	$3004			MOVLW	4
$008C	$0228			SUBWF	main_i_L0, 0
$008D	$	L_main_29:
$008D	$1803			BTFSC	STATUS, C
$008E	$28A8			GOTO	L_main_8
;ejercicio0.c,39 :: 		PORTB = valores[i];
$008F	$0828			MOVF	main_i_L0, 0
$0090	$3F24			ADDLW	main_valores_L0
$0091	$0084			MOVWF	FSR
$0092	$0800			MOVF	INDF, 0
$0093	$0086			MOVWF	PORTB
;ejercicio0.c,40 :: 		delay_ms(5);
$0094	$3021			MOVLW	33
$0095	$00FB			MOVWF	STACK_11
$0096	$30FF			MOVLW	255
$0097	$00FA			MOVWF	STACK_10
$0098	$0BFB			DECFSZ	STACK_11, F
$0099	$289B			GOTO	$+2
$009A	$289E			GOTO	$+4
$009B	$0BFA			DECFSZ	STACK_10, F
$009C	$289B			GOTO	$-1
$009D	$2898			GOTO	$-5
$009E	$3060			MOVLW	96
$009F	$00FA			MOVWF	STACK_10
$00A0	$0BFA			DECFSZ	STACK_10, F
$00A1	$28A0			GOTO	$-1
$00A2	$0000			NOP
$00A3	$0000			NOP
;ejercicio0.c,41 :: 		}
$00A4	$	L_main_9:
;ejercicio0.c,38 :: 		for(i=0; i < 4; i ++){
$00A4	$0AA8			INCF	main_i_L0, 1
$00A5	$1903			BTFSC	STATUS, Z
$00A6	$0AA9			INCF	main_i_L0+1, 1
;ejercicio0.c,41 :: 		}
$00A7	$2884			GOTO	L_main_7
$00A8	$	L_main_8:
;ejercicio0.c,42 :: 		}
$00A8	$	L_main_6:
;ejercicio0.c,44 :: 		if (dato == '2'){
$00A8	$0820			MOVF	main_dato_L0, 0
$00A9	$3A32			XORLW	50
$00AA	$1D03			BTFSS	STATUS, Z
$00AB	$28D5			GOTO	L_main_10
;ejercicio0.c,45 :: 		for(i=3; i > -1; i --){
$00AC	$3003			MOVLW	3
$00AD	$00A8			MOVWF	main_i_L0
$00AE	$3000			MOVLW	0
$00AF	$00A9			MOVWF	main_i_L0+1
$00B0	$	L_main_11:
$00B0	$307F			MOVLW	127
$00B1	$00F0			MOVWF	STACK_0
$00B2	$3080			MOVLW	128
$00B3	$0629			XORWF	main_i_L0+1, 0
$00B4	$0270			SUBWF	STACK_0, 0
$00B5	$1D03			BTFSS	STATUS, Z
$00B6	$28B9			GOTO	L_main_30
$00B7	$0828			MOVF	main_i_L0, 0
$00B8	$3CFF			SUBLW	255
$00B9	$	L_main_30:
$00B9	$1803			BTFSC	STATUS, C
$00BA	$28D5			GOTO	L_main_12
;ejercicio0.c,46 :: 		PORTB = valores[i];
$00BB	$0828			MOVF	main_i_L0, 0
$00BC	$3F24			ADDLW	main_valores_L0
$00BD	$0084			MOVWF	FSR
$00BE	$0800			MOVF	INDF, 0
$00BF	$0086			MOVWF	PORTB
;ejercicio0.c,47 :: 		delay_ms(5);
$00C0	$3021			MOVLW	33
$00C1	$00FB			MOVWF	STACK_11
$00C2	$30FF			MOVLW	255
$00C3	$00FA			MOVWF	STACK_10
$00C4	$0BFB			DECFSZ	STACK_11, F
$00C5	$28C7			GOTO	$+2
$00C6	$28CA			GOTO	$+4
$00C7	$0BFA			DECFSZ	STACK_10, F
$00C8	$28C7			GOTO	$-1
$00C9	$28C4			GOTO	$-5
$00CA	$3060			MOVLW	96
$00CB	$00FA			MOVWF	STACK_10
$00CC	$0BFA			DECFSZ	STACK_10, F
$00CD	$28CC			GOTO	$-1
$00CE	$0000			NOP
$00CF	$0000			NOP
;ejercicio0.c,48 :: 		}
$00D0	$	L_main_13:
;ejercicio0.c,45 :: 		for(i=3; i > -1; i --){
$00D0	$3001			MOVLW	1
$00D1	$02A8			SUBWF	main_i_L0, 1
$00D2	$1C03			BTFSS	STATUS, C
$00D3	$03A9			DECF	main_i_L0+1, 1
;ejercicio0.c,48 :: 		}
$00D4	$28B0			GOTO	L_main_11
$00D5	$	L_main_12:
;ejercicio0.c,49 :: 		}
$00D5	$	L_main_10:
;ejercicio0.c,51 :: 		if (dato == '3'){
$00D5	$0820			MOVF	main_dato_L0, 0
$00D6	$3A33			XORLW	51
$00D7	$1D03			BTFSS	STATUS, Z
$00D8	$2970			GOTO	L_main_14
;ejercicio0.c,52 :: 		dir = recibe_byte();
$00D9	$2004			CALL	_recibe_byte
$00DA	$0870			MOVF	STACK_0, 0
$00DB	$00A1			MOVWF	main_dir_L0
;ejercicio0.c,53 :: 		vueltas = recibe_byte() - 48;
$00DC	$2004			CALL	_recibe_byte
$00DD	$3030			MOVLW	48
$00DE	$0270			SUBWF	STACK_0, 0
$00DF	$00A2			MOVWF	main_vueltas_L0
$00E0	$01A3			CLRF	main_vueltas_L0+1
$00E1	$1C03			BTFSS	STATUS, C
$00E2	$03A3			DECF	main_vueltas_L0+1, 1
;ejercicio0.c,54 :: 		if (dir == '1'){
$00E3	$0821			MOVF	main_dir_L0, 0
$00E4	$3A31			XORLW	49
$00E5	$1D03			BTFSS	STATUS, Z
$00E6	$2928			GOTO	L_main_15
;ejercicio0.c,55 :: 		for(n = 0; n < 520 * vueltas; n++){
$00E7	$01AA			CLRF	main_n_L0
$00E8	$01AB			CLRF	main_n_L0+1
$00E9	$	L_main_16:
$00E9	$0822			MOVF	main_vueltas_L0, 0
$00EA	$00F0			MOVWF	STACK_0
$00EB	$0823			MOVF	main_vueltas_L0+1, 0
$00EC	$00F1			MOVWF	STACK_0+1
$00ED	$3008			MOVLW	8
$00EE	$00F4			MOVWF	STACK_4
$00EF	$3002			MOVLW	2
$00F0	$00F5			MOVWF	STACK_4+1
$00F1	$2011			CALL	_mul_16x16_s
$00F2	$3080			MOVLW	128
$00F3	$062B			XORWF	main_n_L0+1, 0
$00F4	$00F2			MOVWF	STACK_2
$00F5	$3080			MOVLW	128
$00F6	$0671			XORWF	STACK_0+1, 0
$00F7	$0272			SUBWF	STACK_2, 0
$00F8	$1D03			BTFSS	STATUS, Z
$00F9	$28FC			GOTO	L_main_31
$00FA	$0870			MOVF	STACK_0, 0
$00FB	$022A			SUBWF	main_n_L0, 0
$00FC	$	L_main_31:
$00FC	$1803			BTFSC	STATUS, C
$00FD	$2928			GOTO	L_main_17
;ejercicio0.c,56 :: 		for(i=0; i < 4; i ++){
$00FE	$01A8			CLRF	main_i_L0
$00FF	$01A9			CLRF	main_i_L0+1
$0100	$	L_main_19:
$0100	$3080			MOVLW	128
$0101	$0629			XORWF	main_i_L0+1, 0
$0102	$00F0			MOVWF	STACK_0
$0103	$3080			MOVLW	128
$0104	$0270			SUBWF	STACK_0, 0
$0105	$1D03			BTFSS	STATUS, Z
$0106	$2909			GOTO	L_main_32
$0107	$3004			MOVLW	4
$0108	$0228			SUBWF	main_i_L0, 0
$0109	$	L_main_32:
$0109	$1803			BTFSC	STATUS, C
$010A	$2924			GOTO	L_main_20
;ejercicio0.c,57 :: 		PORTB = valores[i];
$010B	$0828			MOVF	main_i_L0, 0
$010C	$3F24			ADDLW	main_valores_L0
$010D	$0084			MOVWF	FSR
$010E	$0800			MOVF	INDF, 0
$010F	$0086			MOVWF	PORTB
;ejercicio0.c,58 :: 		delay_ms(5);
$0110	$3021			MOVLW	33
$0111	$00FB			MOVWF	STACK_11
$0112	$30FF			MOVLW	255
$0113	$00FA			MOVWF	STACK_10
$0114	$0BFB			DECFSZ	STACK_11, F
$0115	$2917			GOTO	$+2
$0116	$291A			GOTO	$+4
$0117	$0BFA			DECFSZ	STACK_10, F
$0118	$2917			GOTO	$-1
$0119	$2914			GOTO	$-5
$011A	$3060			MOVLW	96
$011B	$00FA			MOVWF	STACK_10
$011C	$0BFA			DECFSZ	STACK_10, F
$011D	$291C			GOTO	$-1
$011E	$0000			NOP
$011F	$0000			NOP
;ejercicio0.c,59 :: 		}
$0120	$	L_main_21:
;ejercicio0.c,56 :: 		for(i=0; i < 4; i ++){
$0120	$0AA8			INCF	main_i_L0, 1
$0121	$1903			BTFSC	STATUS, Z
$0122	$0AA9			INCF	main_i_L0+1, 1
;ejercicio0.c,59 :: 		}
$0123	$2900			GOTO	L_main_19
$0124	$	L_main_20:
;ejercicio0.c,60 :: 		}
$0124	$	L_main_18:
;ejercicio0.c,55 :: 		for(n = 0; n < 520 * vueltas; n++){
$0124	$0AAA			INCF	main_n_L0, 1
$0125	$1903			BTFSC	STATUS, Z
$0126	$0AAB			INCF	main_n_L0+1, 1
;ejercicio0.c,60 :: 		}
$0127	$28E9			GOTO	L_main_16
$0128	$	L_main_17:
;ejercicio0.c,61 :: 		}
$0128	$	L_main_15:
;ejercicio0.c,63 :: 		if (dir == '2'){
$0128	$0821			MOVF	main_dir_L0, 0
$0129	$3A32			XORLW	50
$012A	$1D03			BTFSS	STATUS, Z
$012B	$2970			GOTO	L_main_22
;ejercicio0.c,64 :: 		for(n = 0; n < 520 * vueltas; n++){
$012C	$01AA			CLRF	main_n_L0
$012D	$01AB			CLRF	main_n_L0+1
$012E	$	L_main_23:
$012E	$0822			MOVF	main_vueltas_L0, 0
$012F	$00F0			MOVWF	STACK_0
$0130	$0823			MOVF	main_vueltas_L0+1, 0
$0131	$00F1			MOVWF	STACK_0+1
$0132	$3008			MOVLW	8
$0133	$00F4			MOVWF	STACK_4
$0134	$3002			MOVLW	2
$0135	$00F5			MOVWF	STACK_4+1
$0136	$2011			CALL	_mul_16x16_s
$0137	$3080			MOVLW	128
$0138	$062B			XORWF	main_n_L0+1, 0
$0139	$00F2			MOVWF	STACK_2
$013A	$3080			MOVLW	128
$013B	$0671			XORWF	STACK_0+1, 0
$013C	$0272			SUBWF	STACK_2, 0
$013D	$1D03			BTFSS	STATUS, Z
$013E	$2941			GOTO	L_main_33
$013F	$0870			MOVF	STACK_0, 0
$0140	$022A			SUBWF	main_n_L0, 0
$0141	$	L_main_33:
$0141	$1803			BTFSC	STATUS, C
$0142	$2970			GOTO	L_main_24
;ejercicio0.c,65 :: 		for(i=3; i > -1; i --){
$0143	$3003			MOVLW	3
$0144	$00A8			MOVWF	main_i_L0
$0145	$3000			MOVLW	0
$0146	$00A9			MOVWF	main_i_L0+1
$0147	$	L_main_26:
$0147	$307F			MOVLW	127
$0148	$00F0			MOVWF	STACK_0
$0149	$3080			MOVLW	128
$014A	$0629			XORWF	main_i_L0+1, 0
$014B	$0270			SUBWF	STACK_0, 0
$014C	$1D03			BTFSS	STATUS, Z
$014D	$2950			GOTO	L_main_34
$014E	$0828			MOVF	main_i_L0, 0
$014F	$3CFF			SUBLW	255
$0150	$	L_main_34:
$0150	$1803			BTFSC	STATUS, C
$0151	$296C			GOTO	L_main_27
;ejercicio0.c,66 :: 		PORTB = valores[i];
$0152	$0828			MOVF	main_i_L0, 0
$0153	$3F24			ADDLW	main_valores_L0
$0154	$0084			MOVWF	FSR
$0155	$0800			MOVF	INDF, 0
$0156	$0086			MOVWF	PORTB
;ejercicio0.c,67 :: 		delay_ms(5);
$0157	$3021			MOVLW	33
$0158	$00FB			MOVWF	STACK_11
$0159	$30FF			MOVLW	255
$015A	$00FA			MOVWF	STACK_10
$015B	$0BFB			DECFSZ	STACK_11, F
$015C	$295E			GOTO	$+2
$015D	$2961			GOTO	$+4
$015E	$0BFA			DECFSZ	STACK_10, F
$015F	$295E			GOTO	$-1
$0160	$295B			GOTO	$-5
$0161	$3060			MOVLW	96
$0162	$00FA			MOVWF	STACK_10
$0163	$0BFA			DECFSZ	STACK_10, F
$0164	$2963			GOTO	$-1
$0165	$0000			NOP
$0166	$0000			NOP
;ejercicio0.c,68 :: 		}
$0167	$	L_main_28:
;ejercicio0.c,65 :: 		for(i=3; i > -1; i --){
$0167	$3001			MOVLW	1
$0168	$02A8			SUBWF	main_i_L0, 1
$0169	$1C03			BTFSS	STATUS, C
$016A	$03A9			DECF	main_i_L0+1, 1
;ejercicio0.c,68 :: 		}
$016B	$2947			GOTO	L_main_26
$016C	$	L_main_27:
;ejercicio0.c,69 :: 		}
$016C	$	L_main_25:
;ejercicio0.c,64 :: 		for(n = 0; n < 520 * vueltas; n++){
$016C	$0AAA			INCF	main_n_L0, 1
$016D	$1903			BTFSC	STATUS, Z
$016E	$0AAB			INCF	main_n_L0+1, 1
;ejercicio0.c,69 :: 		}
$016F	$292E			GOTO	L_main_23
$0170	$	L_main_24:
;ejercicio0.c,70 :: 		}
$0170	$	L_main_22:
;ejercicio0.c,71 :: 		}
$0170	$	L_main_14:
;ejercicio0.c,73 :: 		}
$0170	$2876			GOTO	L_main_4
$0171	$	L_main_5:
;ejercicio0.c,90 :: 		}
$0171	$2873			GOTO	L_main_2
;ejercicio0.c,91 :: 		}
$0172	$2972			GOTO	$
